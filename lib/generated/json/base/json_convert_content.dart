// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:zjsb_app/page/home/models/mine_entity.dart';
import 'package:zjsb_app/generated/json/mine_entity_helper.dart';
import 'package:zjsb_app/page/home/models/app_update_entity.dart';
import 'package:zjsb_app/generated/json/app_update_entity_helper.dart';
import 'package:zjsb_app/page/login/models/login_entity.dart';
import 'package:zjsb_app/generated/json/login_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {
			case MineEntity:
				return mineEntityFromJson(data as MineEntity, json) as T;
			case AppUpdateEntity:
				return appUpdateEntityFromJson(data as AppUpdateEntity, json) as T;
			case AppUpdateRetdata:
				return appUpdateRetdataFromJson(data as AppUpdateRetdata, json) as T;
			case AppUpdateData:
				return appUpdateDataFromJson(data as AppUpdateData, json) as T;
			case LoginEntity:
				return loginEntityFromJson(data as LoginEntity, json) as T;
				return data as T;
		}
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case MineEntity:
				return mineEntityToJson(data as MineEntity);
			case AppUpdateEntity:
				return appUpdateEntityToJson(data as AppUpdateEntity);
			case AppUpdateRetdata:
				return appUpdateRetdataToJson(data as AppUpdateRetdata);
			case AppUpdateData:
				return appUpdateDataToJson(data as AppUpdateData);
			case LoginEntity:
				return loginEntityToJson(data as LoginEntity);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (MineEntity).toString()){
			return MineEntity().fromJson(json);
		}	else if(type == (AppUpdateEntity).toString()){
			return AppUpdateEntity().fromJson(json);
		}	else if(type == (AppUpdateRetdata).toString()){
			return AppUpdateRetdata().fromJson(json);
		}	else if(type == (AppUpdateData).toString()){
			return AppUpdateData().fromJson(json);
		}	else if(type == (LoginEntity).toString()){
			return LoginEntity().fromJson(json);
		}
		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(<MineEntity>[] is M){
			return data.map<MineEntity>((e) => MineEntity().fromJson(e)).toList() as M;
		}	else if(<AppUpdateEntity>[] is M){
			return data.map<AppUpdateEntity>((e) => AppUpdateEntity().fromJson(e)).toList() as M;
		}	else if(<AppUpdateRetdata>[] is M){
			return data.map<AppUpdateRetdata>((e) => AppUpdateRetdata().fromJson(e)).toList() as M;
		}	else if(<AppUpdateData>[] is M){
			return data.map<AppUpdateData>((e) => AppUpdateData().fromJson(e)).toList() as M;
		}	else if(<LoginEntity>[] is M){
			return data.map<LoginEntity>((e) => LoginEntity().fromJson(e)).toList() as M;
		}
		throw Exception("not fond");
	}

  static M fromJsonAsT<M>(json) {
    if (json is List) {
      return _getListChildType<M>(json);
    } else {
      return _fromJsonSingle<M>(json) as M;
    }
  }
}