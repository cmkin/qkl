def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

def keystorePropertiesFile = rootProject.file("app/key.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
def retrofit2_version = '2.4.0'
def support_version = '27.1.1'
android {
    compileSdkVersion 30
    buildToolsVersion '27.0.3'
    lintOptions {
        disable 'InvalidPackage'
    }
    sourceSets {
        main {
            //说明so的路径为该libs路径，关联所有地图SDK的so文件
            jniLibs.srcDir 'libs'
        }
    }
    defaultConfig {
        applicationId "com.qiqia.duosheng"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 101000
        versionName "1.1.0"
    }
    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
    buildTypes {
        debug {
//            ndk {
//                abiFilters "armeabi-v7a","arm64-v8a"
//            }
            signingConfig signingConfigs.release
        }
        release {
//            ndk {
//                abiFilters "armeabi-v7a"
//            }
            signingConfig signingConfigs.release
            // 是否去除未利用的资源(必须和代码混淆同时开启)
            shrinkResources true
            // 是否开启代码混淆
            minifyEnabled true
            // 是否开启自动拆分多个Dex
            multiDexEnabled true
            //混淆文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}
dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
}
flutter {
    source '../..'
}
